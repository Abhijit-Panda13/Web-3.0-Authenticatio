{"version":3,"sources":["App.jsx","index.js"],"names":["VERIFIER","loginProvider","id","App","useState","isLoading","setLoading","email","setEmail","formIsValid","setFormIsValid","openlogin","setOpenLogin","privKey","setPrivKey","OpenloginUserInfo","loginObject","clientId","redirectUrl","useEffect","validator","isEmail","onMount","a","OpenLogin","network","init","onLoginBrand","event","filter","login","target","map","filtered","console","log","onLoginEmail","extraLoginOptions","login_hint","onLogout","logout","className","Button","variant","onClick","Container","fluid","Row","Col","sm","noValidate","label","type","size","value","onChange","disabled","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1b0cc07e.chunk.js","sourcesContent":["import React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport OpenLogin from \"@toruslabs/openlogin\";\nimport Button from 'react-bootstrap/Button';\nimport \"./app.css\"; \nimport { FaGoogle, FaFacebook } from \"react-icons/fa\";\nimport Container from \"react-bootstrap/Container\";\nimport validator from 'validator';\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport { MDBInput } from 'mdb-react-ui-kit';\n\nconst VERIFIER = [\n  {\n    loginProvider: \"google\",\n    id : \"0\"\n  },\n  {\n    loginProvider: \"facebook\",\n    id : \"1\"\n  }\n]\n\n\nfunction App() {\n  const [isLoading, setLoading] = useState(true);\n  const [email, setEmail] = useState('');\n  const [formIsValid, setFormIsValid] = useState(false);\n  const [openlogin, setOpenLogin] = useState();\n  const [privKey, setPrivKey] = useState();\n  const [OpenloginUserInfo, setOpenloginUserInfo] = useState();\n\n  var loginObject ={\n    loginProvider: \"google\",\n    clientId: \"BDEZMlXEtCPU0_sfOO22To8ZnFS8ppSJs_yBNBxiMWhdAmPJSUk4jlCI3ykKBHO2cl1iDEu_M6UDVFAqALmZPto\",\n    redirectUrl: \"http://localhost:3000/\"\n  }\n\n  useEffect(() => {\n    setFormIsValid(validator.isEmail(email))\n  }, [email]);\n\n\n  const onMount = async () => {\n    setLoading(true);\n\n    try {\n      const openlogin = new OpenLogin({\n        clientId: loginObject.clientId,\n        network: \"mainnet\", // valid values (testnet or mainnet)\n      });\n      setOpenLogin(openlogin);\n\n      await openlogin.init();\n      setPrivKey(openlogin.privKey);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const onLoginBrand = async (event) => {\n    \n    VERIFIER.filter(login => login.id === event.target.id).map(filtered => (\n      loginObject.loginProvider = filtered.loginProvider\n    ));\n    console.log(loginObject);\n    if (isLoading || privKey || !openlogin) return;\n\n    setLoading(true);\n    try {\n      await openlogin.login(loginObject);\n      setPrivKey(openlogin.privKey);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const onLoginEmail = async (event) => {\n\n    \n    if (isLoading || privKey || !openlogin) return;\n\n    setLoading(true);\n    try {\n      await openlogin.login({\n        extraLoginOptions: {\n          login_hint: email,\n        },\n        loginProvider: \"email_passwordless\",\n        redirectUrl: \"http://localhost:3000/\",\n    });\n    \n    setPrivKey(openlogin.privKey);\n    \n    } finally {\n      setLoading(false);\n    }\n  };\n  const onLogout = async () =>{\n    if (isLoading || !openlogin) return;\n\n    setLoading(true);\n      try {\n        await openlogin.logout();\n        setPrivKey(openlogin.privKey);\n      } finally {\n        setLoading(false);\n      }\n    };\n    // {\n    //   loginProvider: VERIFIER.loginProvider,\n    //   redirectUrl: \"http://localhost:3000/redirect\",\n    // }\n  \n  \n  useEffect(() => {\n    onMount();\n    \n  }, []);\n\n  if(isLoading) return <div className=\"central\">Loading...</div>;\n  return privKey ? \n  (\n    <div className=\"central\">\n      <h1>Welcome {OpenloginUserInfo}</h1>\n      <p>Logged in with private key: {privKey}</p>\n      <p>Store the private key generated in localStorage</p>\n      <p>Then you can now use the private key for authentication across different pages</p>\n      <Button  variant=\"outline-dark\" onClick={onLogout}>Logout</Button>\n    </div>\n  ) : (\n    <div className=\"central\">\n      <Container fluid >\n        <Row className=\"head\">\n          <h1 className=\"neon\">Passwordless Login</h1>\n        </Row>\n        <Row>\n          <Col sm={4}></Col>\n          <Col sm = {4}>\n          <form noValidate>\n          <MDBInput \n              label='Email Address'\n              id='typeEmail'\n              type='email'\n              size='lg'\n              value={email}\n              onChange={(event) => setEmail(event.target.value)}\n          />\n          <Button className=\"loginbutton\"\n              disabled={!formIsValid}\n              variant=\"dark\"\n              onClick={onLoginEmail}\n          >\n              Login\n          </Button>\n          </form>\n        </Col>\n      </Row>\n      \n        <Button className=\"fg .hover-zoom\" variant=\"outline-dark\" id=\"0\" onClick={onLoginBrand}>Google <FaGoogle /></Button>\n        <Button className=\"fg .hover-zoom\" variant=\"outline-dark\" id=\"1\" onClick={onLoginBrand}>Facebook <FaFacebook /></Button>\n    </Container>\n    </div> );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n// import Login from './Login';\nimport 'mdb-react-ui-kit/dist/css/mdb.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n    {/* <Login /> */}\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}